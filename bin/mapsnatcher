#!/usr/bin/env ruby

require "optimist"
require "fileutils"
require "open-uri"
require "net/http"
require "yaml"
require "rmagick"
include Magick

TEMP_DIR = "./.ms.tmp"
COORDS_FILE = "#{TEMP_DIR}/coords"
TILES_DIR = "./tiles"

opts = Optimist::options do
  version "mapsnatcher #{File.read(File.expand_path("../../VERSION", __FILE__)).strip}"
  banner self.version
  banner "Usage:"
  banner "  mapsnatcher [options] http://mapwebsite.com/0/xxx/yyy.png"
  banner "  Place XXX and YYY in place of where the respective coordinate numbers would be"
  banner "  in the URL. The first number is typically the zoom level, which is constant."
  banner "\n  Inputs may be given through the CLI, or with flags:"
  banner "  mapsnatcher <url> -x 0-500 -y 0-300"
  banner "  mapsnatcher -b <url> -x 200 -y 200"
  banner "\nOptions:"
  opt :bounds, "find outer boundaries of the map automatically"
  opt :save, "save tiles to a directory ./tiles/"
  opt :version, "display version number"
  opt :help, "display this message"
  banner "Inputs:"
  opt :x, "x-coordinate range, (or x-coordinate if using -b)", type: :string
  opt :y, "y-coordinate range, (or y-coordinate if using -b)", type: :string
  educate_on_error
end

x_range = y_range = nil
xy_in = opts.values_at(:x, :y)
using_xy_in = opts[:x] or opts[:y] # or, if missing one it'll throw this:
if using_xy_in
  if xy_in.map { |o| o =~ /\A\d+#{/-\d+/ unless opts[:bounds]}\z/ }.include? nil
    puts "Error: Invalid coordinate input."
    puts
    Optimist::educate
  end

  # Parse X/Y input into something we can use later
  if opts[:bounds]
    xy_in.map! &:to_i
  else
    x_range, y_range = xy_in.map { |r| Range.new *r.split("-").map(&:to_i) }
  end
end

Optimist::educate if ARGV.empty?
if ARGV.first !~ /\A#{URI::regexp(["http", "https"])}\z/
  puts "Error: Invalid URL."
  puts
  Optimist::educate
end

url = ARGV.first

# False if URL returns a 200
#
# @param url [String] the url to be checked
# @return [Boolean] whether or not the URL is invalid
def invalid?(url)
  uri = URI(url)
  !Net::HTTP.start(uri.host, 443, use_ssl: true){ |http| break http.head uri.path }.instance_of? Net::HTTPOK
end

# Parses ARGV input into usable URL with given X and Y values
#
# @param x [Integer] x-coordinate
# @param y [Integer] y-coordinate
# @return usable URL for map tile
def build_url(url, x, y)
  url.gsub(/xxx/i, x.to_s).gsub(/yyy/i, y.to_s)
end

# Load/create temp directory
using_saved_xy = false
if !File.exist? TEMP_DIR
  Dir.mkdir TEMP_DIR
elsif !Dir.empty? TEMP_DIR
  print "It looks like mapsnatcher didn't close properly. Use backed up files? [Y/n] "
  if STDIN.gets.chomp =~ /n.*/i
    FileUtils.rm_f(Dir.glob("#{TEMP_DIR}/*"))
  elsif [x_range, y_range].include?(nil) and File.exist? COORDS_FILE
    print "Use coordinate range from last time? [Y/n] "
    if STDIN.gets.chomp !~ /n.*/i
      x_range, y_range = YAML.load_file(COORDS_FILE, permitted_classes: [Range])
      using_saved_xy = true
    end
  end
  puts
end

if opts[:bounds]
  # Automatic boundary mode

  # CLI input function
  #
  # @return [Array] user input coordinates
  def get_coords
    print "Enter valid X coordinate [0]: "
    x_in = STDIN.gets.chomp.to_i
    print "Enter valid Y coordinate [0]: "
    y_in = STDIN.gets.chomp.to_i

    print "\nLoading..."

    [x_in, y_in]
  end

  valid_x, valid_y = using_xy_in ? xy_in : get_coords

  print "\rLoading..."
  while invalid? build_url(url, valid_x, valid_y)
    puts "\rInvalid coordinate! Try again."
    puts
    valid_x, valid_y = get_coords
  end

  x_low = x_high = valid_x
  until invalid? build_url(url, x_low - 1, valid_y)
    print "\r\e[KChecking X value: #{x_low}\r"
    x_low -= 1
  end
  until invalid? build_url(url, x_high + 1, valid_y)
    print "\r\e[KChecking X value: #{x_high}\r"
    x_high += 1
  end

  y_low = y_high = valid_y
  until invalid? build_url(url, valid_x, y_low - 1)
    print "\r\e[KChecking Y value: #{y_low}\r"
    y_low -= 1
  end
  until invalid? build_url(url, valid_x, y_high + 1)
    print "\r\e[KChecking Y value: #{y_high}\r"
    y_high += 1
  end

  x_range, y_range = (x_low..x_high), (y_low..y_high)
else
  # User input coordinate mode

  # CLI input function
  #
  # @return [Array] user input coordinate ranges
  def get_coords
    print "Start of X range [0]: "
    x_start = STDIN.gets.chomp.to_i
    print "End of X range: "
    x_range_in = (x_start..STDIN.gets.chomp.to_i)

    print "Start of Y range [0]: "
    y_start = STDIN.gets.chomp.to_i
    print "End of Y range: "
    y_range_in = (y_start..STDIN.gets.chomp.to_i)

    print "\nLoading..."

    [x_range_in, y_range_in]
  end

  x_range, y_range = get_coords unless using_xy_in

  print "\rLoading..."
  while invalid?(build_url url, x_range.first, y_range.first) or
        invalid?(build_url url, x_range.first, y_range.last)  or
        invalid?(build_url url, x_range.last, y_range.first)  or
        invalid?(build_url url, x_range.last, y_range.last)
    puts "\rError: Boundaries incorrect."
    puts "Use `mapsnatcher -b` for help finding the boundaries of the image."
    puts
    x_range, y_range = get_coords
  end
end

puts "\rUsing #{'Saved ' if using_saved_xy}Coordinate Range: [#{x_range.first}-#{x_range.last}], [#{y_range.first}-#{y_range.last}]"

File.open(COORDS_FILE, "w") { |f| f.write [x_range, y_range].to_yaml }

# Use the tile at 0, 0 to calculate final image size
print "\rChecking dimensions..."
sample = Image.from_blob(URI.open(build_url url, x_range.first, y_range.first).read).first
final_size = {x: sample.columns * x_range.size, y: sample.rows * y_range.size}
format = sample.format
puts "\rImage found, #{format} size #{final_size[:x]}x#{final_size[:y]}"
puts

dl_counter = 0
dl_total = x_range.size * y_range.size

stitch = ImageList.new
y_range.each do |y|
  row = ImageList.new

  x_range.each do |x|
    print "Downloading... [#{dl_counter += 1}/#{dl_total}]\r"

    temp = "#{TEMP_DIR}/#{x}_#{y}.#{format == "JPEG" ? "jpg" : format.downcase}"
    if File.exist? temp
      # Load the backup file
      img = Image.read(temp).first
    else
      blob = URI.open(build_url url, x, y).read
      File.open(temp, "wb") { |f| f.write blob }
      img = Image.from_blob(blob).first
    end

    row.push img
  end

  stitch.push row.append(false)
end

thread = Thread.new { stitch = stitch.append(true) }

puts "\nDone!"

# Warnings for incompatible formats for large image sizes
JPEG_MAX = 65535
WEBP_MAX = 16383

if final_size.values.max > JPEG_MAX
  puts "\nWarning! Image dimensions greater than #{JPEG_MAX}px, JPG and WEBP"
  puts "formats are unavailable."
  puts
elsif final_size.values.max > WEBP_MAX
  puts "\nWarning! Image dimensions greater than #{WEBP_MAX}px, WEBP"
  puts "format is unavailable."
  puts
end

print "Enter file name for map: "
filename = STDIN.gets.chomp

print "Saving, this may take a minute..."
thread.join # Wait for ImageMagick thread to finish joining rows
stitch.write filename
puts "\n\nImage written to: #{filename}"

if opts[:save]
  FileUtils.rm COORDS_FILE
  FileUtils.mv TEMP_DIR, TILES_DIR
  puts "Tiles saved to: #{TILES_DIR.match(/\w+/)}/"
else
  FileUtils.rm_rf TEMP_DIR
end
